How did viewing a diff between two versions of a file help you see the bug that was introduced?

I'm able to see what changed in the process of going from the old file to the new file; I was hence able to pick out even a single-character bug.



How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

I'll be able to go back and pick up the features that I once thought weren't useful.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?

The pros of manually creating a commit is that I have full control of the versions/points in time that I want to save/commit. This helps me avoid having too many unncessary versions committed. The cons is that the one-commit-per-logical-change may not be strictly followed: I may forget to commit after I made a change to my program; or, I may not be able to think clearly after programming for a while and may not be able to clearly identify whether the logical change I recently made comprises of one or multiple changes.



Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

Because of the way files are used in each case: files in a Git repository are interrelated; while, in most cases, the content in each document file in Google Docs doesn't depend on others.



How can you use the commands git log and git diff to view the history of files?

Git log gives me a general idea of what was changed after each commit, while git diff shows, to the specificity level of code lines, how the change was made.



How mightusing version control make you more confident to make changes that could break something?

I can totally go back to the previous version of my program to identify the very step when a bug was introducted that broke down my program.